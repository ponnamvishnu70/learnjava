<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

	<import resource="../config/context.xml" />

	<batch:job id="loadData" restartable="true">
		<batch:step id="loading" next="print">
			<batch:tasklet>
				<batch:chunk reader="multiResourceReader"
				processor="itemProcessor"	writer="mysqlItemWriter" commit-interval="1000">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="print">
			<tasklet ref="printTasklet" />
		</batch:step>
	</batch:job>
	
	<!-- To Read all files from a folder,POJO should implement ResourceAware Interface to get the Current File name -->
	 <bean id="multiResourceReader" class=" org.springframework.batch.item.file.MultiResourceItemReader">
		<property name="resources" value="file:C:/data/*.csv" />
		<property name="delegate" ref="cvsFileItemReader" />
  	</bean>
	<!--FlatFileItemReader will read data from CSV file or any file with data separated by a delimiter  -->
	<bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		
		<property name="linesToSkip" value="1"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="timeStamp,openPrice,highPrice,lowPrice,closePrice,adjClosePrice,volume"></property>
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="learnjava.practice.springbatch.mapper.EodFieldSetMapper" />
				</property>
			</bean>

		</property>
	</bean>
	<bean id="mysqlItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[        
            	insert into HIST_EOD_DATA(TICKER,VOLUME,CLOSE_PRICE,OPEN_PRICE,HIGH_PRICE,LOW_PRICE,ADJ_CLOSE_PRICE,TIME_STAMP) 
			values (:ticker, :volume, :closePrice, :openPrice,:highPrice,:lowPrice,:adjClosePrice,:timeStamp)
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>

	</bean>
<bean id="BaseResourceAware" class="learnjava.practice.springbatch.BaseResourceAware">
</bean>
<bean id="itemProcessor" class="learnjava.practice.springbatch.BaseItemProcessor">
</bean>





</beans>