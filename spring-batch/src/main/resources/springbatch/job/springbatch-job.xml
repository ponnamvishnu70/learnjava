<beans xmlns="http://www.springframework.org/schema/beans"	
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

	<import resource="../config/context.xml" />
<!-- taskExecutor ::SimpleAsyncTaskExecutor creates new threads for every task.in this case creates 2 threads -->
<!-- "threadPoolTaskExecutor" ::"threadPoolTaskExecutor" reuses created threads for every task.in this case creates 5 threads.
make sure throttle limit is equal to max corepool size. default throttle limit is 4 -->
<!-- while using multi threading have to use custom reader which has synchronized read method -->
	<job id="loadData" restartable="true" xmlns="http://www.springframework.org/schema/batch">
		<split id="parallel" task-executor="taskExecutor" next="evenOddDecider">
			<flow>
				<step id="loading" >
					<tasklet  task-executor="threadPoolTaskExecutor"  throttle-limit="6">
						<chunk reader="customReader"	processor="itemProcessor" writer="mysqlItemWriter"   commit-interval="1000" skip-limit="1" >
						<skippable-exception-classes>
                        	<include class="org.springframework.batch.item.file.FlatFileParseException"/>
                    	</skippable-exception-classes>	
						<streams>
				         	<stream ref="multiResourceReader"/>		
						</streams>
						</chunk>						
						<listeners>
							<listener ref="loadDataStepListener"/>
						</listeners>
					</tasklet>
				</step>
				
		</flow>
			<flow>
				<step id="print">
					<tasklet ref="printTasklet" />
				</step>
			</flow>
		</split>
		<decision decider="evenOddDeciderStep" id="evenOddDecider">
		<next on="EVEN" to="printAgain" />
		<next on="ODD" to="printAgain" />
		</decision>
		<step id="printAgain">
				<tasklet ref="printAgainTasklet" />
				
		</step>
	</job>

	<bean id="customReader"	class="learnjava.practice.springbatch.tasklet.CustomReader">
		<property name="delegate" ref="multiResourceReader"></property>
	</bean>

	<!-- To Read all files from a folder,POJO should implement ResourceAware 
		Interface to get the Current File name -->
	<bean id="multiResourceReader"
		class=" org.springframework.batch.item.file.MultiResourceItemReader">
		<property name="resources" value="file:C:/data/*.csv" />
		<property name="delegate" ref="cvsFileItemReader" />
		<property name="saveState" value="true"></property>
	</bean>
	<!--FlatFileItemReader will read data from CSV file or any file with data 
		separated by a delimiter -->
	<bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		
		<property name="linesToSkip" value="1"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="timeStamp,openPrice,highPrice,lowPrice,closePrice,adjClosePrice,volume"></property>
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="learnjava.practice.springbatch.mapper.EodFieldSetMapper" />
				</property>
			</bean>
		</property>
	</bean>
	<bean id="mysqlItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[        
            	insert into HIST_EOD_DATA(TICKER,VOLUME,CLOSE_PRICE,OPEN_PRICE,HIGH_PRICE,LOW_PRICE,ADJ_CLOSE_PRICE,TIME_STAMP) 
			values (:ticker, :volume, :closePrice, :openPrice,:highPrice,:lowPrice,:adjClosePrice,:timeStamp)
            ]]>
			</value>
		</property>
		<property name="itemSqlParameterSourceProvider">
			<bean class="learnjava.practice.springbatch.mapper.EodDataSqlParameterMapper" />
		</property>
	</bean>

	<bean id="threadPoolTaskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" scope="step">
		<property name="corePoolSize" value="#{jobParameters['corePoolSize']}" />
		<property name="maxPoolSize" value="10" />
		<property name="waitForTasksToCompleteOnShutdown"
			value="true" />
	</bean>


	<bean id="taskExecutor"	class="org.springframework.core.task.SimpleAsyncTaskExecutor" />
	<bean id="itemProcessor" class="learnjava.practice.springbatch.BaseItemProcessor"/>
	<bean id="printTasklet"	class="learnjava.practice.springbatch.tasklet.PrintTasklet" />
	<bean id="evenOddDeciderStep" class="learnjava.practice.springbatch.decider.EvenOddDecider"/>
	<bean id="printAgainTasklet"	class="learnjava.practice.springbatch.tasklet.PrintAgainTasklet" />
	<bean id="loadDataStepListener"	class="learnjava.practice.springbatch.listeners.LoadDataStepListener" />
	<bean class="org.springframework.batch.core.scope.StepScope" />
	
	
</beans>